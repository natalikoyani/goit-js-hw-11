{"mappings":"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","sources":["src/js/infinity_scroll.js"],"sourcesContent":["import axios from \"axios\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport SimpleLightbox from \"simplelightbox\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n\nconst searchForm = document.querySelector('#search-form');\nconst gallery = document.querySelector('.gallery');\nconst guard = document.querySelector('.js-guard')\n\nconst BASE_URL = 'https://pixabay.com/api/';\nconst API_KEY = '39228988-9f38d0df7f0bcbddd9d36da69';\n\nlet page = 1;\nlet per_page = 40;\n\nlet lightbox = new SimpleLightbox('.gallery a', { captionDelay: 250, });\n\nconst options = {\n  rootMargin: \"300px\",\n}\nconst observer = new IntersectionObserver(handlerLoadMore, options);\n\nsearchForm.addEventListener('submit', handleSubmit);\n\nasync function handleSubmit(evt) {\n    evt.preventDefault();\n    gallery.innerHTML = '';\n    page = 1;\n    const q = searchForm.elements.searchQuery.value.trim().replaceAll(' ', '+');\n    observer.unobserve(guard);\n    \n    try {\n      const data = await fetchImages(q);\n      if (data.hits.length === 0) {\n        Notify.failure(\"Sorry, there are no images matching your search query. Please try again.\");\n      } else if (q === '') {\n        Notify.failure(\"Search field can't be empty!\");\n      } else {\n        Notify.info(`Hooray! We found ${data.totalHits} images.`)\n        gallery.innerHTML = createMarkup(data.hits);\n        lightbox.refresh();\n        smoothScroll();\n        const totalPages = Math.ceil(data.totalHits / per_page);\n        if(page < totalPages) {\n          observer.observe(guard);\n        }\n      }\n    } catch(err) {\n      console.error(err);\n      Notify.failure(\"An error occurred while fetching images. Please try again later.\");\n    }\n}\n\nasync function fetchImages(q) {\n    const searchParams = new URLSearchParams({\n        key: API_KEY,\n        q: q,\n        image_type: 'photo',\n        orientation: 'horizontal',\n        safesearch: true,\n        per_page: per_page,\n        page: page,\n    });\n    const response = await axios.get(`${BASE_URL}?${searchParams}`);\n    return response.data;\n}\n\nfunction createMarkup(arr) {\n    return arr\n    .map(\n        ({ largeImageURL, webformatURL, tags, likes, views, comments, downloads }) => `<div class=\"photo-card\">\n        <a href=\"${largeImageURL}\"><img src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\"/></a>\n        <div class=\"info\">\n          <p class=\"info-item\">\n            <b>Likes <span class=\"info-span\">${likes}</span></b>\n          </p>\n          <p class=\"info-item\">\n            <b>Views <span class=\"info-span\">${views}</span></b>\n          </p>\n          <p class=\"info-item\">\n            <b>Comments <span class=\"info-span\">${comments}</span></b>\n          </p>\n          <p class=\"info-item\">\n            <b>Downloads <span class=\"info-span\">${downloads}</span></b>\n          </p>\n        </div>\n      </div>`\n    )\n    .join('');\n}\n\nfunction smoothScroll() {\n    const { height: cardHeight } = document\n    .querySelector(\".gallery\")\n    .firstElementChild.getBoundingClientRect();\n  \n  window.scrollBy({\n    top: cardHeight * 2,\n    behavior: \"smooth\",\n  });\n  }\n\nasync function handlerLoadMore(entries) {\n  entries.forEach(async (entry) => {\n    if(entry.isIntersecting) {\n      page += 1;\n      const q = searchForm.elements.searchQuery.value.replaceAll(' ', '+');\n      try {\n        const data = await fetchImages(q);\n        gallery.insertAdjacentHTML('beforeend', createMarkup(data.hits));\n        const totalPages = Math.ceil(data.totalHits / per_page);\n        if(page >= totalPages){\n          observer.unobserve(guard);\n        }\n      } catch (err) {\n        console.error(err);\n        Notify.failure(\"An error occurred while fetching more images. Please try again later.\");\n      }\n    }\n  });\n}"],"names":["$bpxeT","parcelRequire","$922d7cf639c1c2a7$var$searchForm","document","querySelector","$922d7cf639c1c2a7$var$gallery","$922d7cf639c1c2a7$var$guard","$922d7cf639c1c2a7$var$BASE_URL","$922d7cf639c1c2a7$var$API_KEY","$922d7cf639c1c2a7$var$page","$922d7cf639c1c2a7$var$per_page","$922d7cf639c1c2a7$var$lightbox","$parcel$interopDefault","$5IjG7","captionDelay","$922d7cf639c1c2a7$var$observer","IntersectionObserver","entries","$922d7cf639c1c2a7$var$_handlerLoadMore","apply","this","arguments","rootMargin","$922d7cf639c1c2a7$var$_handleSubmit","$2TvXO","mark","_callee","evt","q","data","totalPages","preventDefault","innerHTML","elements","searchQuery","value","trim","replaceAll","unobserve","$922d7cf639c1c2a7$var$fetchImages","_ctx","sent","hits","length","$h6c0i","Notify","failure","info","concat","totalHits","$922d7cf639c1c2a7$var$createMarkup","refresh","$922d7cf639c1c2a7$var$smoothScroll","Math","ceil","observe","console","error","t0","$922d7cf639c1c2a7$var$_fetchImages","searchParams","response","URLSearchParams","key","image_type","orientation","safesearch","per_page","page","$dIxxU","default","get","arr","map","param","largeImageURL","webformatURL","tags","likes","views","comments","downloads","join","cardHeight","firstElementChild","getBoundingClientRect","height","window","scrollBy","top","behavior","_callee1","forEach","entry","isIntersecting","insertAdjacentHTML","addEventListener"],"version":3,"file":"infinity_scroll.9d8766ab.js.map"}