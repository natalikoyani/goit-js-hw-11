{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,S,0BAKA,MAAMC,EAAaC,SAASC,cAAc,gBACpCC,EAAUF,SAASC,cAAc,YACjCE,EAAQH,SAASC,cAAc,aAKrC,IAAIG,EAAO,EAGPC,EAAW,IAAIC,EAAAC,GAAJ,CAAmB,aAAc,CAAEC,aAAc,MAEhE,MAGMC,EAAW,IAAIC,sBAkFrBC,eAA+BC,GAC7BA,EAAQC,SAAQF,MAAOG,IACrB,GAAGA,EAAMC,eAAgB,CACvBX,GAAQ,EACR,MAAMY,EAAIjB,EAAWkB,SAASC,YAAYC,MAAMC,WAAW,IAAK,KAChE,IACE,MAAMC,QAAaC,EAAYN,GAC/Bd,EAAQqB,mBAAmB,YAAaC,EAAaH,EAAKI,OAC1D,MAAMC,EAAaC,KAAKC,KAAKP,EAAKQ,UAjG3B,IAkGJzB,GAAQsB,GACTjB,EAASqB,UAAU3B,E,CAErB,MAAO4B,GACPC,QAAQC,MAAMF,GACdG,EAAAC,OAAOC,QAAQ,wE,QAnGP,CACdC,WAAY,UAmCd1B,eAAeW,EAAYN,GACvB,MAAMsB,EAAe,IAAIC,gBAAgB,CACrCC,IA7CQ,qCA8CRxB,EAAGA,EACHyB,WAAY,QACZC,YAAa,aACbC,YAAY,EACZC,SA/CO,GAgDPC,KAAMzC,IAGV,aADuBP,EAAAiD,QAAMC,IAAI,4BAAeT,MAChCjB,I,CAGpB,SAASG,EAAawB,GAClB,OAAOA,EACNC,KACG,EAACC,cAAEA,EAAaC,aAAEA,EAAYC,KAAEA,EAAIC,MAAEA,EAAKC,MAAEA,EAAKC,SAAEA,EAAQC,UAAEA,KAAgB,8CACnEN,gBAA4BC,WAAsBC,sIAGtBC,+GAGAC,kHAGGC,mHAGCC,+DAK9CC,KAAK,G,CAlEV1D,EAAW2D,iBAAiB,UAE5B/C,eAA4BgD,GACxBA,EAAIC,iBACJ1D,EAAQ2D,UAAY,GACpBzD,EAAO,EACP,MAAMY,EAAIjB,EAAWkB,SAASC,YAAYC,MAAM2C,OAAO1C,WAAW,IAAK,KACvEX,EAASqB,UAAU3B,GAEnB,IACE,MAAMkB,QAAaC,EAAYN,GAC/B,GAAyB,IAArBK,EAAKI,KAAKsC,OACZ7B,EAAAC,OAAOC,QAAQ,iFACV,GAAU,KAANpB,EACTkB,EAAAC,OAAOC,QAAQ,oCACV,CACLF,EAAAC,OAAO6B,KAAK,oBAAoB3C,EAAKQ,qBACrC3B,EAAQ2D,UAAYrC,EAAaH,EAAKI,MACtCpB,EAAS4D,UAmDjB,WACI,MAAQC,OAAQC,GAAenE,SAC9BC,cAAc,YACdmE,kBAAkBC,wBAErBC,OAAOC,SAAS,CACdC,IAAkB,EAAbL,EACLM,SAAU,U,CAzDNC,GACA,MAAMhD,EAAaC,KAAKC,KAAKP,EAAKQ,UA7B3B,IA8BJzB,EAAOsB,GACRjB,EAASkE,QAAQxE,E,EAGrB,MAAM4B,GACNC,QAAQC,MAAMF,GACdG,EAAAC,OAAOC,QAAQ,mE","sources":["src/js/infinity_scroll.js"],"sourcesContent":["import axios from \"axios\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport SimpleLightbox from \"simplelightbox\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n\nconst searchForm = document.querySelector('#search-form');\nconst gallery = document.querySelector('.gallery');\nconst guard = document.querySelector('.js-guard')\n\nconst BASE_URL = 'https://pixabay.com/api/';\nconst API_KEY = '39228988-9f38d0df7f0bcbddd9d36da69';\n\nlet page = 1;\nlet per_page = 40;\n\nlet lightbox = new SimpleLightbox('.gallery a', { captionDelay: 250, });\n\nconst options = {\n  rootMargin: \"300px\",\n}\nconst observer = new IntersectionObserver(handlerLoadMore, options);\n\nsearchForm.addEventListener('submit', handleSubmit);\n\nasync function handleSubmit(evt) {\n    evt.preventDefault();\n    gallery.innerHTML = '';\n    page = 1;\n    const q = searchForm.elements.searchQuery.value.trim().replaceAll(' ', '+');\n    observer.unobserve(guard);\n    \n    try {\n      const data = await fetchImages(q);\n      if (data.hits.length === 0) {\n        Notify.failure(\"Sorry, there are no images matching your search query. Please try again.\");\n      } else if (q === '') {\n        Notify.failure(\"Search field can't be empty!\");\n      } else {\n        Notify.info(`Hooray! We found ${data.totalHits} images.`)\n        gallery.innerHTML = createMarkup(data.hits);\n        lightbox.refresh();\n        smoothScroll();\n        const totalPages = Math.ceil(data.totalHits / per_page);\n        if(page < totalPages) {\n          observer.observe(guard);\n        }\n      }\n    } catch(err) {\n      console.error(err);\n      Notify.failure(\"An error occurred while fetching images. Please try again later.\");\n    }\n}\n\nasync function fetchImages(q) {\n    const searchParams = new URLSearchParams({\n        key: API_KEY,\n        q: q,\n        image_type: 'photo',\n        orientation: 'horizontal',\n        safesearch: true,\n        per_page: per_page,\n        page: page,\n    });\n    const response = await axios.get(`${BASE_URL}?${searchParams}`);\n    return response.data;\n}\n\nfunction createMarkup(arr) {\n    return arr\n    .map(\n        ({ largeImageURL, webformatURL, tags, likes, views, comments, downloads }) => `<div class=\"photo-card\">\n        <a href=\"${largeImageURL}\"><img src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\"/></a>\n        <div class=\"info\">\n          <p class=\"info-item\">\n            <b>Likes <span class=\"info-span\">${likes}</span></b>\n          </p>\n          <p class=\"info-item\">\n            <b>Views <span class=\"info-span\">${views}</span></b>\n          </p>\n          <p class=\"info-item\">\n            <b>Comments <span class=\"info-span\">${comments}</span></b>\n          </p>\n          <p class=\"info-item\">\n            <b>Downloads <span class=\"info-span\">${downloads}</span></b>\n          </p>\n        </div>\n      </div>`\n    )\n    .join('');\n}\n\nfunction smoothScroll() {\n    const { height: cardHeight } = document\n    .querySelector(\".gallery\")\n    .firstElementChild.getBoundingClientRect();\n  \n  window.scrollBy({\n    top: cardHeight * 2,\n    behavior: \"smooth\",\n  });\n  }\n\nasync function handlerLoadMore(entries) {\n  entries.forEach(async (entry) => {\n    if(entry.isIntersecting) {\n      page += 1;\n      const q = searchForm.elements.searchQuery.value.replaceAll(' ', '+');\n      try {\n        const data = await fetchImages(q);\n        gallery.insertAdjacentHTML('beforeend', createMarkup(data.hits));\n        const totalPages = Math.ceil(data.totalHits / per_page);\n        if(page >= totalPages){\n          observer.unobserve(guard);\n        }\n      } catch (err) {\n        console.error(err);\n        Notify.failure(\"An error occurred while fetching more images. Please try again later.\");\n      }\n    }\n  });\n}"],"names":["$2shzp","parcelRequire","$45f1522ef3b2e66e$var$searchForm","document","querySelector","$45f1522ef3b2e66e$var$gallery","$45f1522ef3b2e66e$var$guard","$45f1522ef3b2e66e$var$page","$45f1522ef3b2e66e$var$lightbox","$parcel$interopDefault","$fZKcF","captionDelay","$45f1522ef3b2e66e$var$observer","IntersectionObserver","async","entries","forEach","entry","isIntersecting","q","elements","searchQuery","value","replaceAll","data","$45f1522ef3b2e66e$var$fetchImages","insertAdjacentHTML","$45f1522ef3b2e66e$var$createMarkup","hits","totalPages","Math","ceil","totalHits","unobserve","err","console","error","$iQIUW","Notify","failure","rootMargin","searchParams","URLSearchParams","key","image_type","orientation","safesearch","per_page","page","default","get","arr","map","largeImageURL","webformatURL","tags","likes","views","comments","downloads","join","addEventListener","evt","preventDefault","innerHTML","trim","length","info","refresh","height","cardHeight","firstElementChild","getBoundingClientRect","window","scrollBy","top","behavior","$45f1522ef3b2e66e$var$smoothScroll","observe"],"version":3,"file":"infinity_scroll.a489eab7.js.map"}